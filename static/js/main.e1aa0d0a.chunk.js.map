{"version":3,"sources":["AddNewItemForm.tsx","util/popover/MyPopover.tsx","TodoList/TodoListTask/TodoListTask.tsx","TodoList/TodoListTasks.tsx","TodoList/TodoListFooter.tsx","TodoList/TodoList.tsx","services/instanceAxios.ts","services/todoListAPI.ts","redux/todo-reducer.ts","App.tsx","redux/store.ts","index.tsx"],"names":["AddNewItemForm","_ref","addTodo","forTasks","_useState","useState","_useState2","Object","slicedToArray","error","setError","_useState3","_useState4","title","setTitle","_useState5","_useState6","add","setAdd","classes","makeStyles","theme","createStyles","iconAdd","transform","fab","margin","useStyles","react_default","a","createElement","className","TextField","id","type","label","onChange","e","body","target","value","Button","onClick","variant","color","Tooltip","aria-label","Fab","size","Add_default","MyPopover","anchorEl","open","handlePopoverClose","children","popover","pointerEvents","paper","padding","spacing","Fragment","Popover","anchorOrigin","vertical","horizontal","transformOrigin","onClose","disableRestoreFocus","Typography","TodoListTask","deleteTask","updateTaskThunk","todoId","changeIsDone","changeTitleTask","task","props","objectWithoutProperties","editMode","setEditMode","_React$useState","React","_React$useState2","setAnchorEl","containerCssClass","status","Boolean","ListItem","role","undefined","dense","button","Checkbox","edge","checked","_id","tabIndex","disableRipple","onBlur","currentTarget","autoFocus","ListItemText","primary","concat","numberTask","ListItemSecondaryAction","popover_MyPopover","IconButton","onMouseEnter","event","onMouseLeave","Delete_default","TodoListTasks","tasks","root","width","maxWidth","backgroundColor","palette","background","map","index","List","key","TodoList_TodoListTask_TodoListTask","TodoListFooter","setValue","Divider","BottomNavigation","newValue","showLabels","BottomNavigationAction","changeFilter","icon","DoneAll_default","Done_default","PlaylistAddCheck_default","TodoList","getTaskThunk","addTaskThunk","deleteTodoListThunk","filterValue","deleteTaskThunk","useEffect","todoDelete","position","right","top","Clear_default","src_AddNewItemForm","TodoList_TodoListTasks","filter","TodoList_TodoListFooter","instance","axios","create","baseURL","todoListAPI","get","then","res","data","todoListId","delete","post","taskId","items","put","objectSpread2","addTaskSuccess","item","deleteTodoList","dispatch","setTasks","initialState","todoLists","compose","connect","state","todo","getTodoListsThunk","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","stop","_x","apply","this","arguments","resultCode","alert","addTodoListThunk","todoList","newTodo","_ref2","_callee2","_context2","_x2","console","_paper","opacity","left","marginTop","defineProperty","breakpoints","down","tl","Paper","elevation","src_TodoList_TodoList","reducers","combineReducers","length","action","todolist","toConsumableArray","el","objItem","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e1aa0d0a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {useState} from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Tooltip} from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\ninterface IAddNewItemForm {\r\n    addTodo: any,\r\n    forTasks: any\r\n}\r\n\r\nconst AddNewItemForm: React.FC<IAddNewItemForm> = ({addTodo , forTasks}) => {\r\n    const [error, setError] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [add , setAdd]  = useState(false)\r\n    const onAddItemClick = () => {\r\n        setTitle(\"\");\r\n        if (title === \"\") {\r\n            setError(true)\r\n        } else {\r\n            setError(false);\r\n            addTodo(title);\r\n        }\r\n    };\r\n    const onTitleChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let body = e.target.value;\r\n        if (body) setError(false);\r\n        setTitle(body);\r\n\r\n    }\r\n    const activeAdd = () => {\r\n        setAdd(true)\r\n    }\r\n    const deactiveAdd = () => {\r\n        setAdd(false)\r\n    }\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            iconAdd:  {\r\n                transform: 'translateY(10px) translateX(10px)',\r\n            },\r\n            fab: {\r\n                margin: '0 auto',\r\n\r\n            },\r\n\r\n        })\r\n    );\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={forTasks ? 'headerItemForm headerItemFormTasks': 'headerItemForm ' }>\r\n            {add ?\r\n                <form className=\"todoList-newTaskForm\" >\r\n                    <TextField error={error}\r\n                               id=\"standard-required\"\r\n                               type=\"text\"\r\n                               label=\"New item name\"\r\n                               onChange={onTitleChanged}\r\n                               value={title}/>\r\n\r\n                    <Button onClick={onAddItemClick} className={classes.iconAdd} variant=\"contained\" color=\"primary\">\r\n                        Add\r\n                    </Button>\r\n                </form>\r\n                :\r\n                <Tooltip title=\"Add\" aria-label=\"add\" onClick={activeAdd}>\r\n                    <Fab color={forTasks ? \"primary\" : \"secondary\"}\r\n                         size={forTasks ? \"medium\" : \"large\"}>\r\n                        <AddIcon/>\r\n                    </Fab>\r\n                </Tooltip>\r\n\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddNewItemForm;\r\n\r\n","import React, {FC} from \"react\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nconst MyPopover: FC<any> = ({anchorEl , open, handlePopoverClose , children}) => {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            popover: {\r\n                pointerEvents: 'none',\r\n            },\r\n            paper: {\r\n                padding: theme.spacing(1),\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Popover\r\n                id=\"mouse-over-popover\"\r\n                className={classes.popover}\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.paper,\r\n                }}\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n                onClose={handlePopoverClose}\r\n                disableRestoreFocus\r\n            >\r\n                <Typography>{children}</Typography>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\nexport default MyPopover","import React, {ChangeEvent} from 'react';\r\nimport '../../App.css';\r\nimport {useState} from 'react'\r\nimport {ITask} from \"../../types/interfaces\";\r\nimport {ListItem, ListItemText} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MyPopover from \"../../util/popover/MyPopover\";\r\n\r\ninterface IProps {\r\n    deleteTask: Function,\r\n    changeIsDone: Function,\r\n    todoId: string,\r\n    task: ITask,\r\n    changeTitleTask: Function,\r\n    numberTask: number,\r\n    updateTaskThunk: Function\r\n}\r\n\r\nconst TodoListTask: React.FC<IProps> = ({deleteTask, updateTaskThunk, changeIsDone, changeTitleTask, todoId, task, ...props}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [title, setTitle] = useState(task.title);\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\r\n\r\n    const onIsDoneChanged = (e: any) => {\r\n        const value = e.target.checked;\r\n        updateTaskThunk(todoId, task._id, {status: value});\r\n    };\r\n    const call_changeTitleTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const deactivateEditMode = () => {\r\n        updateTaskThunk(todoId, task._id, {title});\r\n        setEditMode(false)\r\n    };\r\n    const call_deleteTask = () => {\r\n        deleteTask(todoId, task._id)\r\n    };\r\n    let containerCssClass = task.status ? \"todoList-task done\" : \"todoList-task\";\r\n    const handlePopoverOpen = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handlePopoverClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const open = Boolean(anchorEl);\r\n    return (\r\n        <div className={containerCssClass}>\r\n            <ListItem role={undefined} dense button>\r\n                <Checkbox\r\n                    edge=\"start\"\r\n                    checked={task.status}\r\n                    onChange={onIsDoneChanged}\r\n                    tabIndex={-1}\r\n                    disableRipple\r\n                />\r\n                {!editMode ?\r\n                    <ListItemText primary={`${props.numberTask}) ${task.title}`} onClick={activateEditMode}/>\r\n                    : <TextField type=\"text\"\r\n                                 label=\"New item name\"\r\n                                 onBlur={deactivateEditMode}\r\n                                 onChange={call_changeTitleTask}\r\n                                 autoFocus={true} value={title}/>\r\n                }\r\n                <ListItemSecondaryAction>\r\n                    <MyPopover anchorEl={anchorEl} open={open} handlePopoverClose={handlePopoverClose}>\r\n                        delete taks\r\n                    </MyPopover>\r\n                    <IconButton onClick={call_deleteTask}\r\n                                onMouseEnter={handlePopoverOpen}\r\n                                onMouseLeave={handlePopoverClose}\r\n                                edge=\"end\" aria-label=\"comments\">\r\n                        <DeleteIcon/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\r\nimport {ITask} from \"../types/interfaces\";\r\nimport List from '@material-ui/core/List';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\n\r\ninterface IProps {\r\n    deleteTask: Function,\r\n    changeIsDone: Function,\r\n    changeTitleTask: Function,\r\n    updateTaskThunk: Function,\r\n    todoId: string,\r\n    tasks: Array<ITask>\r\n}\r\n\r\nconst TodoListTasks: React.FC<IProps> = (\r\n    {\r\n        tasks, deleteTask, updateTaskThunk,\r\n        changeIsDone, changeTitleTask, todoId\r\n    }) => {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                width: '100%',\r\n                padding: 0,\r\n                maxWidth: 360,\r\n                backgroundColor: theme.palette.background.paper,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"todoList-tasks\">\r\n            {tasks && tasks.map((task, index) => {\r\n                return <List className={classes.root} key={task._id}>\r\n                    <TodoListTask\r\n                        task={task}\r\n                        numberTask={index + 1}\r\n                        changeIsDone={changeIsDone}\r\n                        todoId={todoId}\r\n                        changeTitleTask={changeTitleTask}\r\n                        deleteTask={deleteTask}\r\n                        updateTaskThunk={updateTaskThunk}\r\n                    />\r\n                </List>\r\n            })}\r\n        </div>\r\n    );\r\n};\r\nexport default TodoListTasks;\r\n\r\n","import React, {FC} from 'react';\r\nimport '../App.css';\r\nimport {BottomNavigation} from \"@material-ui/core\";\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\ninterface IProps {\r\n    changeFilter: Function,\r\n    todoId: string,\r\n    filterValue: string\r\n}\r\n\r\nconst TodoListFooter: FC<IProps> = (props: any) => {\r\n\r\n    const onAllFilterClick = () => props.changeFilter(props.todoId, \"All\");\r\n    const onCompletedFilterClick = () => props.changeFilter(props.todoId, \"Completed\");\r\n    const onActiveFilterClick = () => props.changeFilter(props.todoId, \"Active\");\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '100%'\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    return (\r\n        <>\r\n            <Divider />\r\n\r\n            <div className=\"todoList-footer\">\r\n                <BottomNavigation\r\n                    value={value}\r\n                    onChange={(event, newValue) => {\r\n                        setValue(newValue);\r\n                    }}\r\n                    showLabels\r\n                    className={classes.root}\r\n                >\r\n                    <BottomNavigationAction onClick={onAllFilterClick} label=\"All\" icon={<DoneAllIcon/>}/>\r\n                    <BottomNavigationAction onClick={onCompletedFilterClick} label=\"Completed\" icon={<DoneIcon/>}/>\r\n                    <BottomNavigationAction onClick={onActiveFilterClick} label=\"Active\"\r\n                                            icon={<PlaylistAddCheckIcon/>}/>\r\n                </BottomNavigation>\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport '../App.css';\r\nimport AddNewItemForm from \"../AddNewItemForm\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport {ITask} from \"../types/interfaces\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport MyPopover from \"../util/popover/MyPopover\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {createStyles} from \"@material-ui/core\";\r\n\r\ninterface ITodoList {\r\n    deleteTodoListThunk: Function,\r\n    changeTitleTask: Function,\r\n    changeIsDone: Function,\r\n    changeFilter: Function\r\n    todoId: string,\r\n    title: string,\r\n    filterValue: string,\r\n    tasks: Array<ITask>,\r\n    getTaskThunk: Function,\r\n    addTaskThunk: Function,\r\n    deleteTaskThunk: Function\r\n    updateTaskThunk: Function\r\n}\r\n\r\nconst TodoList: React.FC<ITodoList & any> = ({\r\n                                           title, getTaskThunk,\r\n                                           addTaskThunk,\r\n                                           changeIsDone, deleteTodoListThunk,\r\n                                           tasks, filterValue,\r\n                                           changeTitleTask, changeFilter, deleteTaskThunk,\r\n                                           todoId, updateTaskThunk\r\n                                       }) => {\r\n    const call_addTask = (title: string) => {\r\n        addTaskThunk(todoId, title)\r\n    };\r\n    const call_deleteTodoList = () => {\r\n        deleteTodoListThunk(todoId)\r\n    };\r\n    useEffect(() => {\r\n        getTaskThunk(todoId)\r\n    }, []);\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\r\n    const handlePopoverClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handlePopoverOpen = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const open = Boolean(anchorEl);\r\n    const useStyles = makeStyles(\r\n        createStyles({\r\n            todoDelete: {\r\n                position: 'absolute',\r\n                right: 5,\r\n                top: 5\r\n            }\r\n        })\r\n    )\r\n    const classes = useStyles()\r\n    return (\r\n        <div className=\"todoList\">\r\n            <div className=\"todoList-header\">\r\n                <MyPopover anchorEl={anchorEl}  open={open} handlePopoverClose={handlePopoverClose}>delete todo</MyPopover>\r\n                <ClearIcon onMouseEnter={handlePopoverOpen}\r\n                           onMouseLeave={handlePopoverClose}\r\n                           onClick={call_deleteTodoList}\r\n                           className={classes.todoDelete}\r\n                />\r\n               <span>\r\n                   <AddNewItemForm forTasks addTodo={call_addTask}/>\r\n               </span>\r\n            </div>\r\n            <TodoListTasks tasks={tasks && tasks.filter((task: any) => {\r\n                if (filterValue === 'All') {\r\n                    return task\r\n                } else if (filterValue === 'Completed') {\r\n                    return task.status\r\n                } else if (filterValue === 'Active') {\r\n                    return !task.status\r\n                }\r\n            })}\r\n                           todoId={todoId}\r\n                           changeIsDone={changeIsDone}\r\n                           changeTitleTask={changeTitleTask}\r\n                           deleteTask={deleteTaskThunk}\r\n                           updateTaskThunk={updateTaskThunk}\r\n\r\n            />\r\n            <TodoListFooter todoId={todoId}\r\n                            changeFilter={changeFilter}\r\n                            filterValue={filterValue}/>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://localhost:3001/',\r\n    // withCredentials: true,\r\n    // headers: {\"API-KEY\": \"4d389a32-8ea5-4b24-aed0-dbacf4d70989\"}\r\n});","import {instance} from './instanceAxios'\r\nimport {ITaskUpdate} from \"../types/interfaces\";\r\n\r\nexport const todoListAPI = {\r\n    getTodoLists: () => {\r\n        return instance.get('todo-lists').then(res => res.data)\r\n    },\r\n    deleteTodoListItem: (todoListId: string) => {\r\n        return instance.delete(`todo-lists/${todoListId}`)\r\n    },\r\n    addTodoLists: (title: string) => {\r\n        return instance.post('todo-lists', {title})\r\n    },\r\n    getTask: (todoListId: string) => {\r\n        return instance.get(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    addTask: (todoListId: string, task: any) => {\r\n        return instance.post(`todo-lists/${todoListId}/tasks`, {title: task}).then(res=> res.data)\r\n    },\r\n    deleteTask: (todoListId: string, taskId: string) => {\r\n        return instance.delete(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTask: (todoListId: string, taskId: string, items: ITaskUpdate)=> {\r\n      return instance.put(`todo-lists/${todoListId}/tasks/${taskId}`, {...items})\r\n    }\r\n}\r\n","import {IState, ITask, ITaskUpdate, ITodoList} from \"../types/interfaces\";\r\nimport {todoListAPI} from \"../services/todoListAPI\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {appStateType} from \"./store\";\r\n\r\n// CONSTANTS\r\nconst ADD_TODO_LIST = 'todo-reducer/ADD_TODO_LIST';\r\nconst DELETE_TODO_LIST = 'todo-reducer/DELETE_TODO_LIST';\r\nconst CHANGE_IS_DONE = 'todo-reducer/CHANGE_IS_DONE';\r\nconst ADD_TASK = 'todo-reducer/ADD_TASK';\r\nconst CHANGE_TITLE_TASK = 'todo-reducer/CHANGE_TITLE_TASK';\r\nconst CHANGE_FILTER = 'todo-reducer/CHANGE_FILTER';\r\nconst SET_TODO_LISTS = 'todo-reducer/SET_TODO_LISTS';\r\nconst DELETE_TASK = 'todo-reducer/DELETE_TASK';\r\nconst SET_TASKS = 'todo-reducer/SET_TASKS';\r\n\r\n// ACTION TYPE\r\ntype AddTodoListType = {\r\n    type: typeof ADD_TODO_LIST,\r\n    newTodo: ITodoList\r\n\r\n}\r\ntype AddTaskType = {\r\n    type: typeof ADD_TASK\r\n    todoListId: string\r\n    item: ITask\r\n}\r\ntype DeleteTodoListType = {\r\n    type: typeof DELETE_TODO_LIST\r\n    todoId: string\r\n}\r\ntype ChangeIsDoneType = {\r\n    type: typeof CHANGE_IS_DONE\r\n    todoId: string\r\n    taskId: string\r\n    value: boolean\r\n}\r\ntype ChangeTitleTaskType = {\r\n    type: typeof CHANGE_TITLE_TASK\r\n    todoId: string\r\n    taskId: string\r\n    body: string\r\n}\r\ntype ChangeFilterType = {\r\n    type: typeof CHANGE_FILTER\r\n    todoId: string\r\n    value: boolean\r\n}\r\ntype SetTodoListsType = {\r\n    type: typeof SET_TODO_LISTS\r\n    todoLists: Array<ITodoList>\r\n}\r\ntype SetTasksType = {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<ITask>\r\n    todoListId: string\r\n}\r\ntype DeleteTaskType = {\r\n    type: typeof DELETE_TASK\r\n    todoListId: string\r\n    taskId: string\r\n}\r\n\r\ntype AllActionType = AddTodoListType\r\n    | AddTaskType\r\n    | DeleteTodoListType\r\n    | ChangeIsDoneType\r\n    | ChangeTitleTaskType\r\n    | ChangeFilterType\r\n    | SetTodoListsType\r\n    | SetTasksType\r\n    | DeleteTaskType\r\n\r\n// ACTION CREATOR\r\nconst addTodoListSuccess = (newTodo: ITodoList): AddTodoListType => ({type: ADD_TODO_LIST, newTodo});\r\nconst addTaskSuccess = (todoListId: string, item: ITask): AddTaskType => ({type: ADD_TASK, todoListId, item});\r\nexport const deleteTodoList = (todoId: string): DeleteTodoListType => ({type: DELETE_TODO_LIST, todoId});\r\nexport const changeIsDone = (todoId: string, taskId: string, value: boolean): ChangeIsDoneType => ({\r\n    type: CHANGE_IS_DONE,\r\n    todoId,\r\n    taskId,\r\n    value\r\n\r\n});\r\nexport const changeTitleTask = (todoId: string, taskId: string, body: string): ChangeTitleTaskType => ({\r\n    type: CHANGE_TITLE_TASK,\r\n    todoId,\r\n    taskId,\r\n    body\r\n});\r\nexport const changeFilter = (todoId: string, value: boolean): ChangeFilterType => {\r\n    return {\r\n        type: CHANGE_FILTER, todoId, value\r\n    }\r\n};\r\nconst setTodoLists = (todoLists: Array<ITodoList>): SetTodoListsType => ({type: SET_TODO_LISTS, todoLists});\r\nconst setTasks = (tasks: Array<ITask>, todoListId: string): SetTasksType => ({type: SET_TASKS, tasks, todoListId});\r\nconst deleteTask = (todoListId: string, taskId: string): DeleteTaskType => ({type: DELETE_TASK, todoListId, taskId});\r\n\r\n// THUNK CREATOR\r\ntype ThunkActionType = ThunkAction<void, appStateType, unknown, AllActionType | any>\r\nexport const getTodoListsThunk = (): ThunkActionType => async (dispatch) => {\r\n    const data = await todoListAPI.getTodoLists();\r\n    dispatch(setTodoLists(data.items));\r\n};\r\nexport const deleteTodoListThunk = (todoListId: string): ThunkActionType => (dispatch) => {\r\n    todoListAPI.deleteTodoListItem(todoListId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(deleteTodoList(todoListId));\r\n            } else {\r\n                alert('error')\r\n            }\r\n\r\n        })\r\n};\r\nexport const addTodoListThunk = (title: string): ThunkActionType => (dispatch) => {\r\n    todoListAPI.addTodoLists(title).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            let todoList = {...res.data.data.item, filterValue: 'All'}\r\n            dispatch(addTodoListSuccess(todoList))\r\n        }\r\n    })\r\n};\r\nexport const deleteTaskThunk = (todoListId: string, taskId: string): ThunkActionType => (dispatch) => {\r\n    todoListAPI.deleteTask(todoListId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(deleteTask(todoListId, taskId))\r\n            } else {\r\n                console.error('try delete task failed')\r\n            }\r\n        })\r\n}\r\nexport const addTaskThunk = (todoListId: string, task: ITask): ThunkActionType => async (dispatch) => {\r\n    const data = await todoListAPI.addTask(todoListId, task);\r\n    if (data.resultCode === 0) {\r\n        dispatch(addTaskSuccess(todoListId, data.item));\r\n    }\r\n}\r\nexport const getTaskThunk = (todoListId: string): ThunkActionType => (dispatch) => {\r\n    todoListAPI.getTask(todoListId).then(res => {\r\n        dispatch(setTasks(res.data.items, todoListId))\r\n\r\n    })\r\n}\r\nexport const updateTaskThunk = (todoListId: string, taskId: string, items: ITaskUpdate): ThunkActionType => (dispatch) => {\r\n    todoListAPI.updateTask(todoListId, taskId, items)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getTaskThunk(todoListId))\r\n            }\r\n        })\r\n}\r\n\r\n// INITIAL STATE\r\nconst initialState: IState = {\r\n    todoLists: []\r\n};\r\n\r\n// REDUCER\r\nexport const todoReducer = (state = initialState, action: AllActionType) => {\r\n    switch (action.type) {\r\n        case SET_TODO_LISTS:\r\n            return {\r\n                ...state,\r\n                todoLists: action.todoLists.map((todolist: ITodoList) => ({...todolist, filterValue: 'All'}))\r\n            };\r\n        case ADD_TODO_LIST:\r\n            let newTodo = {...action.newTodo};\r\n            return {\r\n                ...state,\r\n                todoLists: [...state.todoLists, newTodo]\r\n\r\n            };\r\n        case DELETE_TODO_LIST:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.filter(el => el._id !== action.todoId)\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map(el => {\r\n                    if (el._id === action.todoListId) {\r\n                        return {\r\n                            ...el,\r\n                            tasks: [...el.tasks, action.item]\r\n                        }\r\n                    } else {\r\n                        return {...el}\r\n                    }\r\n                })\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todo: any) => {\r\n                    if (todo._id === action.todoListId) {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: [...action.tasks]\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map(objItem => {\r\n                    if (objItem._id === action.todoListId) {\r\n                        return {\r\n                            ...objItem,\r\n                            tasks: objItem.tasks.filter(el => el._id !== action.taskId)\r\n                        }\r\n\r\n                    } else return {...objItem}\r\n                })\r\n            }\r\n        case CHANGE_FILTER:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map(objItem => {\r\n                    if (objItem._id === action.todoId) {\r\n                        return {\r\n                            ...objItem,\r\n                            filterValue: action.value\r\n                        }\r\n                    } else {\r\n                        return {...objItem}\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList/TodoList\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addTaskThunk,\r\n    addTodoListThunk,\r\n    changeFilter,\r\n    changeIsDone,\r\n    changeTitleTask, deleteTaskThunk,\r\n    deleteTodoList, deleteTodoListThunk, getTaskThunk, getTodoListsThunk, updateTaskThunk\r\n} from \"./redux/todo-reducer\";\r\nimport {appStateType} from \"./redux/store\";\r\nimport {ITodoList} from \"./types/interfaces\";\r\nimport {createStyles, Paper, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ninterface IProps {\r\n    addTodoListThunk: Function,\r\n    changeIsDone: Function,\r\n    changeTitleTask: Function,\r\n    changeFilter: Function,\r\n\r\n    getTodoListsThunk: Function\r\n    deleteTodoListThunk: Function,\r\n    getTaskThunk: Function,\r\n    addTaskThunk: Function,\r\n    deleteTaskThunk: Function,\r\n    updateTaskThunk: Function\r\n}\r\n\r\ninterface IMapStateToProps {\r\n    todoLists: ITodoList[]\r\n}\r\n\r\ntype packedPropsType = IProps & IMapStateToProps\r\nconst App: React.FC<packedPropsType> = (\r\n    {\r\n        addTodoListThunk, todoLists,\r\n        changeIsDone, changeTitleTask,\r\n        deleteTodoListThunk, changeFilter,\r\n        getTodoListsThunk,\r\n        addTaskThunk, getTaskThunk, deleteTaskThunk,\r\n        updateTaskThunk\r\n    }) => {\r\n    const call_addTodoList = (title: string) => {\r\n        addTodoListThunk(title);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTodoListsThunk();\r\n    }, []);\r\n    const useStyles = makeStyles((theme: Theme) =>{\r\n        debugger\r\n        return createStyles({\r\n            title: {\r\n                position: 'absolute',\r\n                top: -30,\r\n                opacity: 0.3,\r\n                left: 0,\r\n                width: '100%'\r\n            },\r\n            paper: {\r\n                position: 'relative',\r\n                padding: theme.spacing(1),\r\n                margin: theme.spacing(2),\r\n                marginTop: 50,\r\n                width: `calc(25% - ${theme.spacing(4)}px)`,\r\n                [theme.breakpoints.down('md')]:{\r\n                    padding: theme.spacing(1),\r\n                    margin: theme.spacing(1),\r\n                    width: `calc(33% - ${theme.spacing(2)}px)`,\r\n                },\r\n                [theme.breakpoints.down('sm')]:{\r\n                    width: `calc(50% - ${theme.spacing(2)}px)`\r\n                },\r\n                [theme.breakpoints.down('xs')]:{\r\n                    width: 300\r\n                }\r\n\r\n            }\r\n        })}\r\n    );\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <div>\r\n                <AddNewItemForm forTasks={false} addTodo={call_addTodoList}/>\r\n            </div>\r\n            <div className=\"App\">\r\n                {todoLists.map((tl: any) => {\r\n                    return (\r\n                        <Paper className={classes.paper} elevation={3}>\r\n                            <Typography variant=\"h6\"\r\n                                        className={classes.title}\r\n                            >{tl.title}</Typography>\r\n                            <TodoList todoId={tl._id}\r\n                                      title = {tl.title}\r\n                                      key={tl._id}\r\n                                      tasks={tl.tasks}\r\n                                      filterValue={tl.filterValue}\r\n                                      deleteTaskThunk={deleteTaskThunk}\r\n                                      changeIsDone={changeIsDone}\r\n                                      changeTitleTask={changeTitleTask}\r\n                                      deleteTodoListThunk={deleteTodoListThunk}\r\n                                      changeFilter={changeFilter}\r\n                                      getTaskThunk={getTaskThunk}\r\n                                      addTaskThunk={addTaskThunk}\r\n                                      updateTaskThunk={updateTaskThunk}\r\n\r\n                            />\r\n                        </Paper>\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state: appStateType): IMapStateToProps => {\r\n    return {\r\n        todoLists: state.todo.todoLists\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        deleteTodoList, changeIsDone, changeTitleTask,\r\n        changeFilter, getTodoListsThunk, deleteTodoListThunk,\r\n        addTodoListThunk, getTaskThunk, addTaskThunk, deleteTaskThunk,\r\n        updateTaskThunk\r\n    })\r\n)(App);\r\n\r\n","import {combineReducers, createStore, compose , applyMiddleware} from \"redux\";\r\nimport {todoReducer} from \"./todo-reducer\";\r\nimport thunk from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n    todo: todoReducer,\r\n});\r\n\r\nexport type appStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport let store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './redux/store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}